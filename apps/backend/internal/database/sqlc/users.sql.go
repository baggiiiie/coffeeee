// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package db

import (
	"context"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (username, email, password_hash, password_salt)
VALUES (?, ?, ?, ?)
RETURNING id
`

type CreateUserParams struct {
	Username     string `json:"username"`
	Email        string `json:"email"`
	PasswordHash string `json:"password_hash"`
	PasswordSalt string `json:"password_salt"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.Email,
		arg.PasswordHash,
		arg.PasswordSalt,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const findUserIdByEmailExcludingID = `-- name: FindUserIdByEmailExcludingID :one
SELECT id FROM users WHERE email = ? AND id != ?
`

type FindUserIdByEmailExcludingIDParams struct {
	Email string `json:"email"`
	ID    int64  `json:"id"`
}

func (q *Queries) FindUserIdByEmailExcludingID(ctx context.Context, arg FindUserIdByEmailExcludingIDParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, findUserIdByEmailExcludingID, arg.Email, arg.ID)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getAuthByEmail = `-- name: GetAuthByEmail :one
SELECT id, username, password_hash, password_salt
FROM users
WHERE email = ?
`

type GetAuthByEmailRow struct {
	ID           int64  `json:"id"`
	Username     string `json:"username"`
	PasswordHash string `json:"password_hash"`
	PasswordSalt string `json:"password_salt"`
}

func (q *Queries) GetAuthByEmail(ctx context.Context, email string) (GetAuthByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getAuthByEmail, email)
	var i GetAuthByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.PasswordSalt,
	)
	return i, err
}

const getUserProfileByID = `-- name: GetUserProfileByID :one
SELECT username, email, created_at, updated_at
FROM users
WHERE id = ?
`

type GetUserProfileByIDRow struct {
	Username  string    `json:"username"`
	Email     string    `json:"email"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) GetUserProfileByID(ctx context.Context, id int64) (GetUserProfileByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getUserProfileByID, id)
	var i GetUserProfileByIDRow
	err := row.Scan(
		&i.Username,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserPartial = `-- name: UpdateUserPartial :exec
UPDATE users
SET
  username = COALESCE(NULLIF(?, ''), username),
  email = COALESCE(NULLIF(?, ''), email)
WHERE id = ?
`

type UpdateUserPartialParams struct {
	NULLIF   interface{} `json:"NULLIF"`
	NULLIF_2 interface{} `json:"NULLIF_2"`
	ID       int64       `json:"id"`
}

func (q *Queries) UpdateUserPartial(ctx context.Context, arg UpdateUserPartialParams) error {
	_, err := q.db.ExecContext(ctx, updateUserPartial, arg.NULLIF, arg.NULLIF_2, arg.ID)
	return err
}
