// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: coffee.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createCoffee = `-- name: CreateCoffee :one
INSERT INTO coffees (user_id, name, origin, roaster, description, photo_path) 
VALUES (?, ?, ?, ?, ?, ?) 
RETURNING id, user_id, name, origin, roaster, description, photo_path, created_at, updated_at
`

type CreateCoffeeParams struct {
	UserID      int64          `json:"user_id"`
	Name        string         `json:"name"`
	Origin      sql.NullString `json:"origin"`
	Roaster     sql.NullString `json:"roaster"`
	Description sql.NullString `json:"description"`
	PhotoPath   sql.NullString `json:"photo_path"`
}

type CreateCoffeeRow struct {
	ID          int64          `json:"id"`
	UserID      int64          `json:"user_id"`
	Name        string         `json:"name"`
	Origin      sql.NullString `json:"origin"`
	Roaster     sql.NullString `json:"roaster"`
	Description sql.NullString `json:"description"`
	PhotoPath   sql.NullString `json:"photo_path"`
	CreatedAt   time.Time      `json:"created_at"`
	UpdatedAt   time.Time      `json:"updated_at"`
}

func (q *Queries) CreateCoffee(ctx context.Context, arg CreateCoffeeParams) (CreateCoffeeRow, error) {
	row := q.db.QueryRowContext(ctx, createCoffee,
		arg.UserID,
		arg.Name,
		arg.Origin,
		arg.Roaster,
		arg.Description,
		arg.PhotoPath,
	)
	var i CreateCoffeeRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Origin,
		&i.Roaster,
		&i.Description,
		&i.PhotoPath,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findCoffeeByUserAndDetails = `-- name: FindCoffeeByUserAndDetails :one
SELECT id 
FROM coffees 
WHERE user_id = ? AND name = ? AND IFNULL(origin,'') = ? AND IFNULL(roaster,'') = ?
`

type FindCoffeeByUserAndDetailsParams struct {
	UserID  int64          `json:"user_id"`
	Name    string         `json:"name"`
	Origin  sql.NullString `json:"origin"`
	Roaster sql.NullString `json:"roaster"`
}

func (q *Queries) FindCoffeeByUserAndDetails(ctx context.Context, arg FindCoffeeByUserAndDetailsParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, findCoffeeByUserAndDetails,
		arg.UserID,
		arg.Name,
		arg.Origin,
		arg.Roaster,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getCoffeeByID = `-- name: GetCoffeeByID :one
SELECT 
    id, user_id, name, origin, roaster, description, photo_path, created_at, updated_at 
FROM coffees 
WHERE id = ? AND user_id = ?
`

type GetCoffeeByIDParams struct {
	ID     int64 `json:"id"`
	UserID int64 `json:"user_id"`
}

type GetCoffeeByIDRow struct {
	ID          int64          `json:"id"`
	UserID      int64          `json:"user_id"`
	Name        string         `json:"name"`
	Origin      sql.NullString `json:"origin"`
	Roaster     sql.NullString `json:"roaster"`
	Description sql.NullString `json:"description"`
	PhotoPath   sql.NullString `json:"photo_path"`
	CreatedAt   time.Time      `json:"created_at"`
	UpdatedAt   time.Time      `json:"updated_at"`
}

func (q *Queries) GetCoffeeByID(ctx context.Context, arg GetCoffeeByIDParams) (GetCoffeeByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getCoffeeByID, arg.ID, arg.UserID)
	var i GetCoffeeByIDRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Origin,
		&i.Roaster,
		&i.Description,
		&i.PhotoPath,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCoffeeByIDOnly = `-- name: GetCoffeeByIDOnly :one
SELECT 
    origin, roaster, description, photo_path, created_at, updated_at 
FROM coffees 
WHERE id = ?
`

type GetCoffeeByIDOnlyRow struct {
	Origin      sql.NullString `json:"origin"`
	Roaster     sql.NullString `json:"roaster"`
	Description sql.NullString `json:"description"`
	PhotoPath   sql.NullString `json:"photo_path"`
	CreatedAt   time.Time      `json:"created_at"`
	UpdatedAt   time.Time      `json:"updated_at"`
}

func (q *Queries) GetCoffeeByIDOnly(ctx context.Context, id int64) (GetCoffeeByIDOnlyRow, error) {
	row := q.db.QueryRowContext(ctx, getCoffeeByIDOnly, id)
	var i GetCoffeeByIDOnlyRow
	err := row.Scan(
		&i.Origin,
		&i.Roaster,
		&i.Description,
		&i.PhotoPath,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listCoffeesForUser = `-- name: ListCoffeesForUser :many
SELECT 
    id, name, origin, roaster, description, photo_path, created_at, updated_at 
FROM coffees 
WHERE user_id = ? 
ORDER BY created_at DESC
`

type ListCoffeesForUserRow struct {
	ID          int64          `json:"id"`
	Name        string         `json:"name"`
	Origin      sql.NullString `json:"origin"`
	Roaster     sql.NullString `json:"roaster"`
	Description sql.NullString `json:"description"`
	PhotoPath   sql.NullString `json:"photo_path"`
	CreatedAt   time.Time      `json:"created_at"`
	UpdatedAt   time.Time      `json:"updated_at"`
}

func (q *Queries) ListCoffeesForUser(ctx context.Context, userID int64) ([]ListCoffeesForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, listCoffeesForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListCoffeesForUserRow{}
	for rows.Next() {
		var i ListCoffeesForUserRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Origin,
			&i.Roaster,
			&i.Description,
			&i.PhotoPath,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCoffeePhotoPath = `-- name: UpdateCoffeePhotoPath :exec
UPDATE coffees 
SET photo_path = ? 
WHERE id = ? AND user_id = ?
`

type UpdateCoffeePhotoPathParams struct {
	PhotoPath sql.NullString `json:"photo_path"`
	ID        int64          `json:"id"`
	UserID    int64          `json:"user_id"`
}

func (q *Queries) UpdateCoffeePhotoPath(ctx context.Context, arg UpdateCoffeePhotoPathParams) error {
	_, err := q.db.ExecContext(ctx, updateCoffeePhotoPath, arg.PhotoPath, arg.ID, arg.UserID)
	return err
}
