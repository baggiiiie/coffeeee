// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: brew_logs.sql

package db

import (
	"context"
	"database/sql"
)

const createBrewLog = `-- name: CreateBrewLog :one
INSERT INTO brew_logs (
  user_id, coffee_id, brew_method, coffee_weight, water_weight, grind_size,
  water_temperature, brew_time, tasting_notes, rating
) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
RETURNING id
`

type CreateBrewLogParams struct {
	UserID           int64           `json:"user_id"`
	CoffeeID         int64           `json:"coffee_id"`
	BrewMethod       string          `json:"brew_method"`
	CoffeeWeight     sql.NullFloat64 `json:"coffee_weight"`
	WaterWeight      sql.NullFloat64 `json:"water_weight"`
	GrindSize        sql.NullString  `json:"grind_size"`
	WaterTemperature sql.NullFloat64 `json:"water_temperature"`
	BrewTime         sql.NullInt64   `json:"brew_time"`
	TastingNotes     sql.NullString  `json:"tasting_notes"`
	Rating           sql.NullInt64   `json:"rating"`
}

func (q *Queries) CreateBrewLog(ctx context.Context, arg CreateBrewLogParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createBrewLog,
		arg.UserID,
		arg.CoffeeID,
		arg.BrewMethod,
		arg.CoffeeWeight,
		arg.WaterWeight,
		arg.GrindSize,
		arg.WaterTemperature,
		arg.BrewTime,
		arg.TastingNotes,
		arg.Rating,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getBrewLogByID = `-- name: GetBrewLogByID :one
SELECT coffee_weight, water_weight, grind_size, water_temperature, brew_time,
       tasting_notes, rating, strftime('%Y-%m-%dT%H:%M:%fZ', created_at) AS created_at
FROM brew_logs
WHERE id = ?
`

type GetBrewLogByIDRow struct {
	CoffeeWeight     sql.NullFloat64 `json:"coffee_weight"`
	WaterWeight      sql.NullFloat64 `json:"water_weight"`
	GrindSize        sql.NullString  `json:"grind_size"`
	WaterTemperature sql.NullFloat64 `json:"water_temperature"`
	BrewTime         sql.NullInt64   `json:"brew_time"`
	TastingNotes     sql.NullString  `json:"tasting_notes"`
	Rating           sql.NullInt64   `json:"rating"`
	CreatedAt        interface{}     `json:"created_at"`
}

func (q *Queries) GetBrewLogByID(ctx context.Context, id int64) (GetBrewLogByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getBrewLogByID, id)
	var i GetBrewLogByIDRow
	err := row.Scan(
		&i.CoffeeWeight,
		&i.WaterWeight,
		&i.GrindSize,
		&i.WaterTemperature,
		&i.BrewTime,
		&i.TastingNotes,
		&i.Rating,
		&i.CreatedAt,
	)
	return i, err
}

const getCoffeeOwnerID = `-- name: GetCoffeeOwnerID :one
SELECT user_id FROM coffees WHERE id = ?
`

func (q *Queries) GetCoffeeOwnerID(ctx context.Context, id int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, getCoffeeOwnerID, id)
	var user_id int64
	err := row.Scan(&user_id)
	return user_id, err
}
